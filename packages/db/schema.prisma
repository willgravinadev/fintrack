generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "driverAdapters", "fullTextSearchPostgres"]
  engineType      = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  email        String  @unique @db.VarChar(256)
  name         String  @db.VarChar(64)
  passwordHash String? @map("password_hash") @db.VarChar(256)
  avatarURL    String? @map("avatar_url") @db.VarChar(256)

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  googleAccount       GoogleAccount?      @relation("user_to_google_account")
  ownedWallets        Wallet[]            @relation("user_to_owned_wallets")
  participatedWallets WalletParticipant[] @relation("user_to_wallet_participants")
  transactions        Transaction[]       @relation("user_to_transactions")
  stockTransactions   StockTransaction[]  @relation("user_to_investor")

  @@index([name])
  @@index([email, deletedAt], name: "users_email_deleted_at_idx")
  @@map("users")
}

model GoogleAccount {
  googleID  String  @unique @map("google_account_id") @db.VarChar(256)
  avatarURL String? @map("avatar_url") @db.VarChar(256)
  name      String  @db.VarChar(256)
  email     String  @unique @db.VarChar(256)

  // Relations
  userID String @unique @map("user_id") @db.Uuid
  user   User   @relation("user_to_google_account", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Default fields
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@id([userID, googleID])
  @@index([email])
  @@map("google_accounts")
}

model Currency {
  symbol String @unique @db.VarChar(10)
  name   String @db.VarChar(256)

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@map("currencies")
}

model Wallet {
  name String @db.VarChar(64)

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  ownerID String @map("owner_id") @db.Uuid
  owner   User   @relation("user_to_owned_wallets", fields: [ownerID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  participants         WalletParticipant[] @relation("wallet_to_participants")
  outgoingTransactions Transaction[]       @relation("from_wallet_to_transactions")
  incomingTransactions Transaction[]       @relation("to_wallet_to_transactions")
  stockTransactions    StockTransaction[]  @relation("wallet_to_stock_transactions")

  @@index([name])
  @@index([ownerID])
  @@map("wallets")
}

model WalletParticipant {
  // Relations
  userID   String @map("participant_id") @db.Uuid
  user     User   @relation("user_to_wallet_participants", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
  walletID String @map("wallet_id") @db.Uuid
  wallet   Wallet @relation("wallet_to_participants", fields: [walletID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Default fields
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@id([walletID, userID])
  @@index([userID])
  @@map("wallet_participants")
}

enum TransactionType {
  TRANSFER_OUT
  TRANSFER_IN
  STOCK_PURCHASE
  STOCK_SALE
  STOCK_DIVIDEND
}

model Transaction {
  name          String          @db.VarChar(64)
  amountInCents Int             @map("amount_in_cents")
  currency      String          @map("currency_symbol") @db.VarChar(10)
  type          TransactionType @map("transaction_type")
  description   String?         @db.Text

  sourceWalletID String? @map("from_wallet_id") @db.Uuid
  sourceWallet   Wallet? @relation("from_wallet_to_transactions", fields: [sourceWalletID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  destinationWalletID String? @map("to_wallet_id") @db.Uuid
  destinationWallet   Wallet? @relation("to_wallet_to_transactions", fields: [destinationWalletID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  userID String @map("user_id") @db.Uuid
  user   User   @relation("user_to_transactions", fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userID])
  @@index([sourceWalletID])
  @@index([destinationWalletID])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

model StockTransaction {
  acquisitionPriceInCents Int       @map("purchase_price_in_cents")
  acquisitionAt           DateTime  @map("purchase_at") @db.Timestamptz()
  disposalPriceInCents    Int?      @map("sale_price_in_cents")
  disposalAt              DateTime? @map("sale_at") @db.Timestamptz()

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  stockID String @map("stock_id") @db.Uuid
  stock   Stock  @relation("stock_to_stock_transactions", fields: [stockID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  walletID String @map("wallet_id") @db.Uuid
  wallet   Wallet @relation("wallet_to_stock_transactions", fields: [walletID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  investorID String @map("investor_id") @db.Uuid
  investor   User   @relation("user_to_investor", fields: [investorID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([stockID])
  @@index([walletID])
  @@map("stock_transactions")
}

model Stock {
  symbol    String  @db.VarChar(10)
  shortName String  @db.VarChar(99)
  longName  String  @db.VarChar(256)
  logoURL   String? @map("logo_url") @db.VarChar(256)

  currentMarketPriceInCents Int      @map("current_market_price_in_cents")
  lastUpdatedMarketPriceAt  DateTime @map("last_updated_market_price_at") @db.Timestamptz()

  // Relations
  stockTransactions StockTransaction[]    @relation("stock_to_stock_transactions")
  priceLogs         StockPriceLogPerDay[] @relation("stock_to_stock_price_logs")
  stocksToWatch     StocksToWatch[]       @relation("stock_to_stocks_to_watch")

  exchangeID String   @map("exchange_id") @db.Uuid
  exchange   Exchange @relation("exchange_to_stocks", fields: [exchangeID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@unique([symbol, exchangeID])
  @@index([symbol])
  @@map("stocks")
}

model Exchange {
  shortName String @db.VarChar(256)
  longName  String @db.VarChar(256)
  symbol    String @unique @db.VarChar(10)

  // Relations
  stocks Stock[] @relation("exchange_to_stocks")

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  @@index([symbol])
  @@map("exchanges")
}

model StockPriceLogPerDay {
  date                      DateTime @map("date") @db.Timestamptz()
  openPriceInCents          Int      @map("open_price_in_cents")
  highPriceInCents          Int      @map("high_price_in_cents")
  lowPriceInCents           Int      @map("low_price_in_cents")
  closePriceInCents         Int      @map("close_price_in_cents")
  volume                    Int      @map("volume")
  adjustedClosePriceInCents Int?     @map("adjusted_close_price_in_cents")

  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  stockID String @map("stock_id") @db.Uuid
  stock   Stock  @relation("stock_to_stock_price_logs", fields: [stockID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([date])
  @@map("stock_price_logs")
}

model StocksToWatch {
  // Default fields
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at") @db.Timestamptz()
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz()
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz()

  // Relations
  stockID String @map("stock_id") @db.Uuid
  stock   Stock  @relation("stock_to_stocks_to_watch", fields: [stockID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([stockID])
  @@map("stocks_to_watch")
}
